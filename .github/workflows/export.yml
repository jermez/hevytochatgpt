name: Export Hevy

on:
  schedule:
    - cron: '0 21 * * *'   # 00:00 at UTC+3 (Helsinki) = 21:00 UTC previous day (UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check secret exists
        env:
          HEVY_API_KEY: ${{ secrets.HEVY_API_KEY }}
        run: |
          if [ -z "$HEVY_API_KEY" ]; then
            echo "::error::HEVY_API_KEY is empty or missing"
            exit 1
          fi

      - name: Smoke test API (should be 200)
        env:
          HEVY_API_KEY: ${{ secrets.HEVY_API_KEY }}
        run: |
          code=$(curl -s -o /dev/null -w '%{http_code}' \
                 -H "api-key: $HEVY_API_KEY" \
                 -H "accept: application/json" \
                 "https://api.hevyapp.com/v1/workouts?page=1&pageSize=1")
          echo "HTTP $code"
          if [ "$code" -ge 400 ]; then
            echo "::error::Hevy API returned HTTP $code. Check API key or account."
            exit 1
          fi

      - name: Install deps
        run: pip install requests

      # ---------- 1) Dump schema of first workout ----------
      - name: Dump first workout JSON (for key discovery)
        env:
          HEVY_API_KEY: ${{ secrets.HEVY_API_KEY }}
        shell: bash
        run: |
          python - <<'PY'
          import os, requests, json, sys
          API='https://api.hevyapp.com/v1'
          HEAD={'accept':'application/json','api-key':os.environ['HEVY_API_KEY']}
          # list first page
          r = requests.get(f'{API}/workouts?page=1&pageSize=1', headers=HEAD, timeout=30)
          r.raise_for_status()
          lst = r.json().get('workouts',[])
          if not lst:
            print('No workouts returned'); sys.exit(0)
          wid = lst[0]['id']
          d = requests.get(f'{API}/workouts/{wid}', headers=HEAD, timeout=30)
          d.raise_for_status()
          data = d.json()
          # print key hints so we see the real structure in logs
          def k(o): return list(o.keys()) if isinstance(o, dict) else type(o).__name__
          print('WORKOUT KEYS:', k(data))
          if 'exercises' in data and data['exercises']:
            ex = data['exercises'][0]
            print('EXERCISE KEYS:', k(ex))
            if 'sets' in ex and ex['sets']:
              s = ex['sets'][0]
              print('SET KEYS:', k(s))
              # also print sample set object (truncated)
              print('SET SAMPLE:', json.dumps(s)[:600])
          # print date-ish fields
          for dk in ('startedAt','completedAt','createdAt','date'):
            if dk in data: print(f'{dk}:', data[dk])
          PY

      # ---------- 2) Export using discovered keys (robust fallbacks) ----------
      - name: Export from Hevy API
        env:
          HEVY_API_KEY: ${{ secrets.HEVY_API_KEY }}
        shell: bash
        run: |
          python - <<'PY'
          import os, csv, time, requests, datetime as dt, sys
          API='https://api.hevyapp.com/v1'
          HEAD={'accept':'application/json','api-key':os.environ['HEVY_API_KEY']}
          SINCE=(dt.datetime.utcnow()-dt.timedelta(days=30)).isoformat()+'Z'
          PAGE_SIZE=10

          def get(url):
            r=requests.get(url, headers=HEAD, timeout=30)
            if r.status_code>=400:
              print('ERROR', r.status_code, url, file=sys.stderr)
              print(r.text[:800], file=sys.stderr)
              r.raise_for_status()
            return r.json()

          def get_first(_d, keys, default=None):
            for k in keys:
              if isinstance(k, tuple):
                # nested lookup ('metrics','weightKg')
                cur=_d
                ok=True
                for kk in k:
                  if isinstance(cur, dict) and kk in cur:
                    cur=cur[kk]
                  else:
                    ok=False; break
                if ok and cur not in (None,''):
                  return cur
              else:
                if isinstance(_d, dict) and k in _d and _d[k] not in (None,''):
                  return _d[k]
            return default

          rows=[['workoutId','date','exercise','setIndex','weightKg','reps','rpe','isWarmup']]
          page=1
          total_sets=0
          while True:
            url=f'{API}/workouts?page={page}&pageSize={PAGE_SIZE}&from={SINCE}'
            data=get(url)
            wos=data.get('workouts',[]) or []
            if not wos:
              break

            for w in wos:
              wid=w.get('id')
              wd=get(f'{API}/workouts/{wid}')
              # try multiple date fields
              date = get_first(wd, ['startedAt','completedAt','createdAt','date'], '')
              exs = wd.get('exercises') or []
              for ex in exs:
                ex_name = get_first(ex, ['name','exerciseName','title','exercise','exerciseTitle'], 'Unknown')
                sets = ex.get('sets') or []
                for i,s in enumerate(sets,1):
                  weight = get_first(s, ['weightKg','weight','kg',('metrics','weightKg')], 0) or 0
                  reps   = get_first(s, ['reps','repetitions',('metrics','reps')], 0) or 0
                  rpe    = get_first(s, ['rpe',('metrics','rpe')], '')
                  warm   = bool(get_first(s, ['isWarmup','warmup','warmUp'], False))
                  rows.append([wid, date, ex_name, i, weight, reps, rpe, warm])
                  total_sets+=1

            print(f'Fetched page {page} with {len(wos)} workouts; total sets so far {total_sets}')
            page+=1
            time.sleep(0.1)
            if len(wos) < PAGE_SIZE:
              break

          import pathlib
          pathlib.Path('out').mkdir(parents=True, exist_ok=True)
          with open('out/hevy_sets.csv','w',newline='') as f:
            csv.writer(f).writerows(rows)
          print(f'Wrote out/hevy_sets.csv with {len(rows)-1} rows')
          if len(rows)==1:
            sys.exit("No sets exported; check keys above")
          PY

      - name: Commit CSV (if present)
        shell: bash
        run: |
          set -euo pipefail
          test -f out/hevy_sets.csv || { echo "::error::out/hevy_sets.csv was not created"; exit 1; }
          git config user.name "hevy-bot"
          git config user.email "hevy-bot@example.com"
          git add out/hevy_sets.csv
          git commit -m "update csv" || echo "no changes"
          git push
